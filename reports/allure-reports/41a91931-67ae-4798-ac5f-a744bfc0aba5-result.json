{"name": "test_login", "status": "broken", "statusDetails": {"message": "TypeError: unsupported operand type(s) for +: 'TypeError' and 'str'", "trace": "self = <pages.EventsPage.flows.EventsPage object at 0x040DC0A0>\n\n    def value_exists(self):\n    \n        try:\n            for element in self.driver.find_elements_by_class_name('events-row-container'):\n>               for element2 in element:\nE               TypeError: 'WebElement' object is not iterable\n\npages\\EventsPage\\flows.py:25: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <login_test.TestLogin object at 0x0392AFD0>\n\n    def test_login(self):\n        try:\n    \n            driver = self.driver\n            driver.get(utils.URL)\n    \n            login = LoginPage(driver)\n            homepage= HomePage(driver)\n            eventspage = EventsPage(driver)\n    \n            login.enter_username(utils.USERNAME)\n            login.enter_instance(utils.INSTANCE)\n            login.enter_password(utils.PASSWORD)\n            login.click_login()\n            homepage.navigate_events_screen()\n            # eventspage.search_value(\"NewUser\")\n            # time.sleep(5)\n            # eventspage.value_exists(\"NewUser\")\n            # time.sleep(5)\n            eventspage.search_value(\"Purchase\")\n            time.sleep(5)\n>           eventspage.value_exists()\n\ntests\\login_test.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.EventsPage.flows.EventsPage object at 0x040DC0A0>\n\n    def value_exists(self):\n    \n        try:\n            for element in self.driver.find_elements_by_class_name('events-row-container'):\n                for element2 in element:\n                    elementName = element2.text\n                    if 'Purchas8eStarted' in elementName:\n                        pass\n                    else:\n                        break\n    \n        except Exception as e:\n    \n>           print(e + \"\" + elementName)\nE           TypeError: unsupported operand type(s) for +: 'TypeError' and 'str'\n\npages\\EventsPage\\flows.py:34: TypeError"}, "attachments": [{"name": "test_login_05-07-2020_20-54-55", "source": "8c017575-6543-4324-8b0a-20265c5378bf-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3f72c39e-da17-4b37-bcb0-6305d0936022-attachment.txt", "type": "text/plain"}], "start": 1593971675649, "stop": 1593971696490, "uuid": "32fb42f6-912e-4822-948e-1dc2192c397e", "historyId": "8a9dfa4f406383cd388e6699ea6b6a72", "testCaseId": "2ce0d2b159a1b134adc13e328bfd71c0", "fullName": "tests.login_test.TestLogin#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-BFIIM5B"}, {"name": "thread", "value": "13140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.login_test"}]}